import unittest
from pyfuzzy.operators import lamda_cut

class LamdaCutTestCase(unittest.TestCase):

    def test_lamda_cut(self):                   # error about great values in dic
        with self.assertRaises(TypeError):
            u = {0: 0.2, 1: 0.5, 2: 1.3}
            a = 0.3
            s = "crisp"
            lamda_cut.lamda_cut(u, a, s)


    def test_lamda_cut1(self):                  # error about great values in dic
        with self.assertRaises(TypeError):
            u = {0: 0.2, 1: 0.5, 2: 3.1}
            a = 0.3
            s = "crisp"
            lamda_cut.lamda_cut(u, a, s)


    def test_lamda_cut2(self):                  # error about int value of lamda-cut
        with self.assertRaises(TypeError):
            u = {0: 0.2, 1: 0.5, 2: 0.9}
            a = 1
            s = "crisp"
            lamda_cut.lamda_cut(u, a, s)

    def test_lamda_cut3(self):                  # error about great value of lamda-cut
        with self.assertRaises(TypeError):
            u = {0: 0.2, 1: 0.5, 2: 0.9}
            a = 2.1
            s = "crisp"
            lamda_cut.lamda_cut(u, a, s)


    def test_lamda_cut4(self):                   # test for list with wrong length
        with self.assertRaises(TypeError):
            u = {0: 0.2, 1: 0.5, 2: 1.3}
            a = 0.3
            s = "boolean"
            lamda_cut.lamda_cut(u, a, s)


    def test_lamda_cut5(self):                   # error about great values in dic
        with self.assertRaises(TypeError):
            u = {0: 0.2, 1: 0.5, 2: 3.5}
            a = 0.3
            s = "boolean"
            lamda_cut.lamda_cut(u, a, s)


    def test_lamda_cut6(self):                   # error about wrong request
        with self.assertRaises(TypeError):
            u = {0: 0.2, 1: 0.5, 2: 0.7}
            a = 0.3
            s = "cris"
            lamda_cut.lamda_cut(u, a, s)


    def test_lamda_cut7(self):                   # error about wrong request
        with self.assertRaises(TypeError):
            u = {0: 0.2, 1: 0.5, 2: 1.3}
            a = 0.3
            s = "ble"
            lamda_cut.lamda_cut(u, a, s)

    def test_lamda_cut8(self):                #test about right values
        u = {0: 0.2, 1: 0.5, 2: 0.7, 3: 0.3123, 4: 0.1117, 5: 0.67843, 6: 0.00007}
        a = 0.3
        s = "crisp"
        self.assertEqual(lamda_cut.lamda_cut(u, a, s),[1,2,3,5])


    def test_lamda_cut9(self):                #test about right values
        u = {0: 0.00000000002, 1: 0.99999999999999999}
        a = 0.45678
        s = "crisp"
        self.assertEqual(lamda_cut.lamda_cut(u, a, s),[1])

    def test_lamda_cut10(self):                #test about right values
        u = {0: 0.1, 1: 0.6, 2: 0.7, 3: 0.29}
        a = 0.30000000111
        s = "crisp"
        self.assertEqual(lamda_cut.lamda_cut(u, a, s),[1,2])

    def test_lamda_cut11(self):                #test about right values
        u = {0: 0.2, 1: 0.1, 2: 0.7}
        a = 0.222222222222222223
        s = "crisp"
        self.assertEqual(lamda_cut.lamda_cut(u, a, s),[2])


    def test_lamda_cut12(self):                #test about right values
        u = {0: 0.2, 1: 0.5, 2: 0.7}
        a = 0.395832000011
        s = "boolean"
        self.assertEqual(lamda_cut.lamda_cut(u, a, s),[0,1,1])

    def test_lamda_cut13(self):                # test about right values
        u = {0: 0.5, 1: 0.1, 2: 0.2}
        a = 0.3
        s = "boolean"
        self.assertEqual(lamda_cut.lamda_cut(u, a, s),[1,0,0])




if __name__ == '__main__':
    unittest.main()
